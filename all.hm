/////////////////////////////////
// Everything we support today //
/////////////////////////////////

// You can define procedures and types.
// Definition order doesn't matter.
proc do_nothing() -> void { ret void; }
proc add(a: s32, b: s32) -> s32 { ret a + b; }
proc get_entity_pos(e: Entity) -> Vector2 { ret e.pos; }

type Vector2 { x: float32; y: float32; }
type Entity { id: s32; pos: Vector2; }


proc with_nested() -> s32 {
    // Procedure body defines a scope of it's own, so you can
    // define local (nested) procedures and types.
    proc two() -> s32 { ret one() + 1; }
    proc one() -> s32 { ret 1; }

    // Procedures and types of outer scopes are still available
    // if not shadowed local definition.
    type Vector2 { x: s32; y: s32; }
    proc more_nested() -> s32 {
        proc one() -> s32 { ret 10; }
        ret one();
    }

    proc get_y(v: Vector2) -> s32 { ret v.y; }

    ret more_nested();
}

// TODO: loops
proc stuff(a: float32, r: float32, v: Vector2) -> Vector2 {
    // Procedure body may contain statements

    // 1) Variable declarations...
    x : s32;
    w: Vector2;
    // ...with optional initializers.
    y : s32 = 42;
    h : Vector2 = v;
    // When initializer is present types may be inferred automagically.
    x1 := x;
    vx := v.x;
    thing := add(vx, r);
    stuff : Vector2; // no initializer == zeroinitialize

    // 2) Assignment statements
    x = 7;
    v = vector2_unit_up();
    // We can assign to procedure arguments, but caller won't see any effect,
    // because all argments are passed by value.
    r = add(a, 24.0);
    v.x = r;
    r = add(v.y, 42.0);
    v.y = add(v.x, r);

    // 3) Return statement, with explicit return value. Even void must be specified.
    ret v;

    // You can just put your tiny local helper procedures after the last return,
    // if your naming is good enough for this to be readable =)
    proc add(a: float32, b: float32) -> float32 { ret a + b; } 
    proc vector2_unit_up() -> Vector2 { v: Vector2; v.y = 1.0; ret v; }
}

// You can make procedures linkable from outside as a DLL/dylib/so symbols
// by using * (star) after 'proc' keyword.
proc* called_from_c(data: s32*) -> s32 {
    ret add(*data, 40);
}

// Pointers
proc play_with_pointers() -> void {
    // Language has only pass-by-value semantic. Pointers to values are values =)
    integer : s32; // actual integer is allocated on the stack
    pointer : s32*; // p is a pointer to s32 (initialized to null)

    // You can use & to take an address of a variable
    pointer = &integer;

    // You can read the value back by dereferencing a pointer
    integer =  *pointer;

    // You can write through the pointer by assigning to dereference
    *pointer = integer;

    // Functions can take pointer arguments
    proc modify_integer(ip: s32*) -> void {
        *ip = 42;
        ret void;
    }

    modify_integer(&integer);

    // Member-of operation on structure type works for pointers (no need for arrow)
    v : Vector2;
    p := &v;

    sum := p.x + p.y;

    // You can also get an address of a member like so
    px := &v.x;

    ret void;
}


